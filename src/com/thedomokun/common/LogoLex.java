/* The following code was generated by JFlex 1.4.2 on 1/23/09 5:52 PM */

package com.thedomokun.common;

import java.io.IOException;

import com.thedomokun.common.LogoSym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 1/23/09 5:52 PM from the specification file
 * <tt>logo.lex</tt>
 */
public final class LogoLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\40\1\45\1\44\1\0\1\45\1\43\16\40\4\0\1\45\1\0"+
    "\1\42\1\0\1\40\2\0\1\40\2\0\1\3\1\1\1\0\1\2"+
    "\1\40\1\4\12\37\1\41\1\0\1\5\1\6\1\7\1\40\1\0"+
    "\1\32\1\33\1\21\1\13\1\16\1\15\1\27\1\30\1\14\1\40"+
    "\1\34\1\26\1\12\1\20\1\23\1\22\1\25\1\17\1\10\1\24"+
    "\1\11\1\40\1\31\3\40\1\35\1\0\1\36\1\0\1\40\1\0"+
    "\1\32\1\33\1\21\1\13\1\16\1\15\1\27\1\30\1\14\1\40"+
    "\1\34\1\26\1\12\1\20\1\23\1\22\1\25\1\17\1\10\1\24"+
    "\1\11\1\40\1\31\3\40\4\0\41\40\2\0\4\40\4\0\1\40"+
    "\2\0\1\40\7\0\1\40\4\0\1\40\5\0\27\40\1\0\37\40"+
    "\1\0\u013f\40\31\0\162\40\4\0\14\40\16\0\5\40\11\0\1\40"+
    "\21\0\130\40\5\0\23\40\12\0\1\40\13\0\1\40\1\0\3\40"+
    "\1\0\1\40\1\0\24\40\1\0\54\40\1\0\46\40\1\0\5\40"+
    "\4\0\202\40\1\0\4\40\3\0\105\40\1\0\46\40\2\0\2\40"+
    "\6\0\20\40\41\0\46\40\2\0\1\40\7\0\47\40\11\0\21\40"+
    "\1\0\27\40\1\0\3\40\1\0\1\40\1\0\2\40\1\0\1\40"+
    "\13\0\33\40\5\0\3\40\15\0\4\40\14\0\6\40\13\0\32\40"+
    "\5\0\31\40\7\0\12\40\4\0\146\40\1\0\11\40\1\0\12\40"+
    "\1\0\23\40\2\0\1\40\17\0\74\40\2\0\3\40\60\0\62\40"+
    "\u014f\0\71\40\2\0\22\40\2\0\5\40\3\0\14\40\2\0\12\40"+
    "\21\0\3\40\1\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\1\40\3\0\4\40\2\0\11\40\2\0\2\40\2\0\3\40"+
    "\11\0\1\40\4\0\2\40\1\0\5\40\2\0\16\40\15\0\3\40"+
    "\1\0\6\40\4\0\2\40\2\0\26\40\1\0\7\40\1\0\2\40"+
    "\1\0\2\40\1\0\2\40\2\0\1\40\1\0\5\40\4\0\2\40"+
    "\2\0\3\40\13\0\4\40\1\0\1\40\7\0\17\40\14\0\3\40"+
    "\1\0\11\40\1\0\3\40\1\0\26\40\1\0\7\40\1\0\2\40"+
    "\1\0\5\40\2\0\12\40\1\0\3\40\1\0\3\40\2\0\1\40"+
    "\17\0\4\40\2\0\12\40\1\0\1\40\17\0\3\40\1\0\10\40"+
    "\2\0\2\40\2\0\26\40\1\0\7\40\1\0\2\40\1\0\5\40"+
    "\2\0\10\40\3\0\2\40\2\0\3\40\10\0\2\40\4\0\2\40"+
    "\1\0\3\40\4\0\12\40\1\0\1\40\20\0\2\40\1\0\6\40"+
    "\3\0\3\40\1\0\4\40\3\0\2\40\1\0\1\40\1\0\2\40"+
    "\3\0\2\40\3\0\3\40\3\0\10\40\1\0\3\40\4\0\5\40"+
    "\3\0\3\40\1\0\4\40\11\0\1\40\17\0\11\40\11\0\1\40"+
    "\7\0\3\40\1\0\10\40\1\0\3\40\1\0\27\40\1\0\12\40"+
    "\1\0\5\40\4\0\7\40\1\0\3\40\1\0\4\40\7\0\2\40"+
    "\11\0\2\40\4\0\12\40\22\0\2\40\1\0\10\40\1\0\3\40"+
    "\1\0\27\40\1\0\12\40\1\0\5\40\2\0\11\40\1\0\3\40"+
    "\1\0\4\40\7\0\2\40\7\0\1\40\1\0\2\40\4\0\12\40"+
    "\22\0\2\40\1\0\10\40\1\0\3\40\1\0\27\40\1\0\20\40"+
    "\4\0\6\40\2\0\3\40\1\0\4\40\11\0\1\40\10\0\2\40"+
    "\4\0\12\40\22\0\2\40\1\0\22\40\3\0\30\40\1\0\11\40"+
    "\1\0\1\40\2\0\7\40\3\0\1\40\4\0\6\40\1\0\1\40"+
    "\1\0\10\40\22\0\2\40\15\0\72\40\4\0\20\40\1\0\12\40"+
    "\47\0\2\40\1\0\1\40\2\0\2\40\1\0\1\40\2\0\1\40"+
    "\6\0\4\40\1\0\7\40\1\0\3\40\1\0\1\40\1\0\1\40"+
    "\2\0\2\40\1\0\15\40\1\0\3\40\2\0\5\40\1\0\1\40"+
    "\1\0\6\40\2\0\12\40\2\0\2\40\42\0\1\40\27\0\2\40"+
    "\6\0\12\40\13\0\1\40\1\0\1\40\1\0\1\40\4\0\12\40"+
    "\1\0\42\40\6\0\24\40\1\0\6\40\4\0\10\40\1\0\44\40"+
    "\11\0\1\40\71\0\42\40\1\0\5\40\1\0\2\40\1\0\7\40"+
    "\3\0\4\40\6\0\12\40\6\0\12\40\106\0\46\40\12\0\51\40"+
    "\7\0\132\40\5\0\104\40\5\0\122\40\6\0\7\40\1\0\77\40"+
    "\1\0\1\40\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40"+
    "\2\0\47\40\1\0\1\40\1\0\4\40\2\0\37\40\1\0\1\40"+
    "\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40\2\0\7\40"+
    "\1\0\7\40\1\0\27\40\1\0\37\40\1\0\1\40\1\0\4\40"+
    "\2\0\7\40\1\0\47\40\1\0\23\40\16\0\11\40\56\0\125\40"+
    "\14\0\u026c\40\2\0\10\40\12\0\32\40\5\0\113\40\3\0\3\40"+
    "\17\0\15\40\1\0\7\40\13\0\25\40\13\0\24\40\14\0\15\40"+
    "\1\0\3\40\1\0\2\40\14\0\124\40\3\0\1\40\3\0\3\40"+
    "\2\0\12\40\41\0\3\40\2\0\12\40\6\0\130\40\10\0\52\40"+
    "\126\0\35\40\3\0\14\40\4\0\14\40\12\0\50\40\2\0\5\40"+
    "\u038b\0\154\40\224\0\234\40\4\0\132\40\6\0\26\40\2\0\6\40"+
    "\2\0\46\40\2\0\6\40\2\0\10\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\37\40\2\0\65\40\1\0\7\40\1\0\1\40"+
    "\3\0\3\40\1\0\7\40\3\0\4\40\2\0\6\40\4\0\15\40"+
    "\5\0\3\40\1\0\7\40\17\0\4\40\32\0\5\40\20\0\2\40"+
    "\23\0\1\40\13\0\4\40\6\0\6\40\1\0\1\40\15\0\1\40"+
    "\40\0\22\40\36\0\15\40\4\0\1\40\3\0\6\40\27\0\1\40"+
    "\4\0\1\40\2\0\12\40\1\0\1\40\3\0\5\40\6\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\4\40\1\0\3\40\1\0\7\40"+
    "\3\0\3\40\5\0\5\40\26\0\44\40\u0e81\0\3\40\31\0\17\40"+
    "\1\0\5\40\2\0\5\40\4\0\126\40\2\0\2\40\2\0\3\40"+
    "\1\0\137\40\5\0\50\40\4\0\136\40\21\0\30\40\70\0\20\40"+
    "\u0200\0\u19b6\40\112\0\u51a6\40\132\0\u048d\40\u0773\0\u2ba4\40\u215c\0\u012e\40"+
    "\2\0\73\40\225\0\7\40\14\0\5\40\5\0\14\40\1\0\15\40"+
    "\1\0\5\40\1\0\1\40\1\0\2\40\1\0\2\40\1\0\154\40"+
    "\41\0\u016b\40\22\0\100\40\2\0\66\40\50\0\15\40\3\0\20\40"+
    "\20\0\4\40\17\0\2\40\30\0\3\40\31\0\1\40\6\0\5\40"+
    "\1\0\207\40\2\0\1\40\4\0\1\40\13\0\12\40\7\0\32\40"+
    "\4\0\1\40\1\0\32\40\12\0\132\40\3\0\6\40\2\0\6\40"+
    "\2\0\6\40\2\0\3\40\3\0\2\40\3\0\2\40\22\0\3\40"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\17\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\4\11\1\22\1\11\1\23\1\11\1\24"+
    "\1\11\1\25\4\11\1\26\2\11\1\27\3\11\1\30"+
    "\3\11\1\31\1\32\1\11\1\33\1\34\7\11\1\35"+
    "\17\11\1\36\2\11\1\37\11\11\1\40\1\11\1\41"+
    "\7\11\1\42\3\11\1\43\3\11\1\44\6\11\1\45"+
    "\1\11\1\46\1\47\1\11\1\50\7\11\1\51\3\11"+
    "\1\52\1\11\1\53\1\11\1\54\1\55\1\56\1\11"+
    "\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\46\0\46\0\46\0\46\0\114\0\46"+
    "\0\162\0\230\0\276\0\344\0\u010a\0\u0130\0\u0156\0\u017c"+
    "\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac"+
    "\0\46\0\46\0\u02d2\0\46\0\46\0\u02f8\0\46\0\46"+
    "\0\46\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\276"+
    "\0\u0402\0\276\0\u0428\0\276\0\u044e\0\u0474\0\u049a\0\u04c0"+
    "\0\276\0\u04e6\0\u050c\0\276\0\u0532\0\u0558\0\u057e\0\276"+
    "\0\u05a4\0\u05ca\0\u05f0\0\276\0\276\0\u0616\0\276\0\276"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\276"+
    "\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850"+
    "\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\276"+
    "\0\u0980\0\u09a6\0\276\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\276\0\u0b22\0\276\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\276\0\u0c52"+
    "\0\u0c78\0\u0c9e\0\276\0\u0cc4\0\u0cea\0\u0d10\0\276\0\u0d36"+
    "\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\276\0\u0e1a\0\276"+
    "\0\276\0\u0e40\0\276\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe"+
    "\0\u0f24\0\u0f4a\0\276\0\u0f70\0\u0f96\0\u0fbc\0\276\0\u0fe2"+
    "\0\276\0\u1008\0\276\0\276\0\276\0\u102e\0\276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\13\1\22\1\23\1\24\1\25\1\26\1\27\3\13"+
    "\1\30\1\13\1\31\1\32\1\33\1\13\1\34\1\35"+
    "\1\36\2\37\54\0\1\40\45\0\1\41\47\0\1\13"+
    "\1\42\4\13\1\43\16\13\2\0\2\13\15\0\25\13"+
    "\2\0\2\13\15\0\22\13\1\44\2\13\2\0\2\13"+
    "\15\0\4\13\1\45\20\13\2\0\2\13\15\0\5\13"+
    "\1\46\6\13\1\47\10\13\2\0\2\13\15\0\3\13"+
    "\1\50\1\51\2\13\1\52\3\13\1\53\2\13\1\54"+
    "\6\13\2\0\2\13\15\0\10\13\1\55\4\13\1\56"+
    "\7\13\2\0\2\13\15\0\4\13\1\57\1\13\1\60"+
    "\5\13\1\61\10\13\2\0\2\13\15\0\7\13\1\62"+
    "\15\13\2\0\2\13\15\0\1\13\1\63\23\13\2\0"+
    "\2\13\15\0\13\13\1\64\11\13\2\0\2\13\15\0"+
    "\1\13\1\65\23\13\2\0\2\13\15\0\4\13\1\66"+
    "\1\13\1\67\5\13\1\70\5\13\1\71\2\13\2\0"+
    "\2\13\15\0\7\13\1\72\15\13\2\0\2\13\15\0"+
    "\1\13\1\73\5\13\1\74\6\13\1\75\3\13\1\76"+
    "\1\13\1\77\2\0\2\13\15\0\25\13\2\0\1\33"+
    "\1\13\51\0\1\37\11\0\2\13\1\100\22\13\2\0"+
    "\2\13\15\0\10\13\1\101\14\13\2\0\2\13\15\0"+
    "\24\13\1\102\2\0\2\13\15\0\5\13\1\103\17\13"+
    "\2\0\2\13\15\0\6\13\1\104\16\13\2\0\2\13"+
    "\15\0\6\13\1\105\16\13\2\0\2\13\15\0\7\13"+
    "\1\106\15\13\2\0\2\13\15\0\7\13\1\107\15\13"+
    "\2\0\2\13\15\0\3\13\1\110\21\13\2\0\2\13"+
    "\15\0\1\13\1\111\23\13\2\0\2\13\15\0\17\13"+
    "\1\112\5\13\2\0\2\13\15\0\12\13\1\113\12\13"+
    "\2\0\2\13\15\0\4\13\1\114\6\13\1\115\11\13"+
    "\2\0\2\13\15\0\14\13\1\116\10\13\2\0\2\13"+
    "\15\0\13\13\1\117\11\13\2\0\2\13\15\0\1\120"+
    "\24\13\2\0\2\13\15\0\1\121\4\13\1\122\17\13"+
    "\2\0\2\13\15\0\1\123\24\13\2\0\2\13\15\0"+
    "\6\13\1\124\16\13\2\0\2\13\15\0\14\13\1\125"+
    "\10\13\2\0\2\13\15\0\11\13\1\126\13\13\2\0"+
    "\2\13\15\0\14\13\1\127\10\13\2\0\2\13\15\0"+
    "\6\13\1\130\16\13\2\0\2\13\15\0\5\13\1\131"+
    "\17\13\2\0\2\13\15\0\16\13\1\132\6\13\2\0"+
    "\2\13\15\0\2\13\1\133\22\13\2\0\2\13\15\0"+
    "\1\134\24\13\2\0\2\13\15\0\21\13\1\135\3\13"+
    "\2\0\2\13\15\0\22\13\1\136\2\13\2\0\2\13"+
    "\15\0\20\13\1\137\4\13\2\0\2\13\15\0\6\13"+
    "\1\140\16\13\2\0\2\13\15\0\10\13\1\141\14\13"+
    "\2\0\2\13\15\0\3\13\1\142\21\13\2\0\2\13"+
    "\15\0\12\13\1\143\12\13\2\0\2\13\15\0\14\13"+
    "\1\144\10\13\2\0\2\13\15\0\14\13\1\145\10\13"+
    "\2\0\2\13\15\0\1\146\24\13\2\0\2\13\15\0"+
    "\14\13\1\70\10\13\2\0\2\13\15\0\14\13\1\147"+
    "\10\13\2\0\2\13\15\0\22\13\1\150\2\13\2\0"+
    "\2\13\15\0\5\13\1\151\10\13\1\152\6\13\2\0"+
    "\2\13\15\0\24\13\1\153\2\0\2\13\15\0\6\13"+
    "\1\154\16\13\2\0\2\13\15\0\6\13\1\155\16\13"+
    "\2\0\2\13\15\0\1\156\24\13\2\0\2\13\15\0"+
    "\14\13\1\157\10\13\2\0\2\13\15\0\22\13\1\160"+
    "\2\13\2\0\2\13\15\0\16\13\1\161\6\13\2\0"+
    "\2\13\15\0\14\13\1\61\10\13\2\0\2\13\15\0"+
    "\22\13\1\162\2\13\2\0\2\13\15\0\14\13\1\163"+
    "\10\13\2\0\2\13\15\0\1\13\1\164\23\13\2\0"+
    "\2\13\15\0\1\13\1\165\23\13\2\0\2\13\15\0"+
    "\4\13\1\166\20\13\2\0\2\13\15\0\12\13\1\167"+
    "\12\13\2\0\2\13\15\0\14\13\1\170\10\13\2\0"+
    "\2\13\15\0\4\13\1\171\20\13\2\0\2\13\15\0"+
    "\22\13\1\172\2\13\2\0\2\13\15\0\21\13\1\173"+
    "\3\13\2\0\2\13\15\0\10\13\1\174\14\13\2\0"+
    "\2\13\15\0\7\13\1\175\15\13\2\0\2\13\15\0"+
    "\6\13\1\176\16\13\2\0\2\13\15\0\7\13\1\177"+
    "\15\13\2\0\2\13\15\0\12\13\1\200\12\13\2\0"+
    "\2\13\15\0\14\13\1\201\10\13\2\0\2\13\15\0"+
    "\11\13\1\202\13\13\2\0\2\13\15\0\14\13\1\203"+
    "\10\13\2\0\2\13\15\0\6\13\1\204\16\13\2\0"+
    "\2\13\15\0\6\13\1\205\16\13\2\0\2\13\15\0"+
    "\7\13\1\206\15\13\2\0\2\13\15\0\1\207\24\13"+
    "\2\0\2\13\15\0\22\13\1\210\2\13\2\0\2\13"+
    "\15\0\11\13\1\211\13\13\2\0\2\13\15\0\6\13"+
    "\1\212\16\13\2\0\2\13\15\0\3\13\1\50\21\13"+
    "\2\0\2\13\15\0\14\13\1\213\10\13\2\0\2\13"+
    "\15\0\10\13\1\214\14\13\2\0\2\13\15\0\7\13"+
    "\1\215\15\13\2\0\2\13\15\0\1\216\24\13\2\0"+
    "\2\13\15\0\14\13\1\217\10\13\2\0\2\13\15\0"+
    "\7\13\1\220\15\13\2\0\2\13\15\0\6\13\1\221"+
    "\16\13\2\0\2\13\15\0\10\13\1\222\14\13\2\0"+
    "\2\13\15\0\14\13\1\223\10\13\2\0\2\13\15\0"+
    "\12\13\1\224\12\13\2\0\2\13\15\0\14\13\1\225"+
    "\10\13\2\0\2\13\15\0\3\13\1\77\21\13\2\0"+
    "\2\13\15\0\11\13\1\226\13\13\2\0\2\13\15\0"+
    "\6\13\1\227\16\13\2\0\2\13\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\11\1\1\1\11\20\1\2\11\1\1\2\11"+
    "\1\1\3\11\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
/*
	private int new Yytoken(int type)
	{
		return new Yytoken(type, yytext());
	}

	private int new Yytoken(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}
*/
	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LogoLex(java.io.Reader in) {
  	// TODO: code that goes to constructor
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LogoLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1682) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return new Yytoken(LogoSym.GT ,yytext(),yyline,yychar,yychar + 1);
          }
        case 48: break;
        case 26: 
          { return new Yytoken(LogoSym.BL ,yytext(),yyline,yychar,yychar + 2);
          }
        case 49: break;
        case 21: 
          { return new Yytoken(LogoSym.FL ,yytext(),yyline,yychar,yychar + 2);
          }
        case 50: break;
        case 25: 
          { return new Yytoken(LogoSym.BR ,yytext(),yyline,yychar,yychar + 2);
          }
        case 51: break;
        case 34: 
          { return new Yytoken(LogoSym.FIRST ,yytext(),yyline,yychar,yychar + 5);
          }
        case 52: break;
        case 20: 
          { return new Yytoken(LogoSym.FR ,yytext(),yyline,yychar,yychar + 2);
          }
        case 53: break;
        case 13: 
          { return new Yytoken(LogoSym.COLON ,yytext(),yyline,yychar,yychar + 1);
          }
        case 54: break;
        case 23: 
          { return new Yytoken(LogoSym.TO ,yytext(),yyline,yychar,yychar + 2);
          }
        case 55: break;
        case 10: 
          { return new Yytoken(LogoSym.LBRACKET ,yytext(),yyline,yychar,yychar + 1);
          }
        case 56: break;
        case 11: 
          { return new Yytoken(LogoSym.RBRACKET ,yytext(),yyline,yychar,yychar + 1);
          }
        case 57: break;
        case 36: 
          { return new Yytoken(LogoSym.LESSP, yytext(), yyline, yychar, yychar + 5);
          }
        case 58: break;
        case 18: 
          { return new Yytoken(LogoSym.IF ,yytext(),yyline,yychar,yychar + 2);
          }
        case 59: break;
        case 17: 
          { return new Yytoken(LogoSym.GEQ ,yytext(),yyline,yychar,yychar + 2);
          }
        case 60: break;
        case 22: 
          { return new Yytoken(LogoSym.RIGHT ,yytext(),yyline,yychar, yychar + yytext().length());
          }
        case 61: break;
        case 16: 
          { return new Yytoken(LogoSym.LEQ ,yytext(),yyline,yychar,yychar + 2);
          }
        case 62: break;
        case 41: 
          { return new Yytoken(LogoSym.PRODUCT ,yytext(),yyline,yychar,yychar + 7);
          }
        case 63: break;
        case 37: 
          { return new Yytoken(LogoSym.IFELSE ,yytext(),yyline,yychar,yychar + 6);
          }
        case 64: break;
        case 42: 
          { return new Yytoken(LogoSym.BUTLAST ,yytext(),yyline,yychar,yychar + 7);
          }
        case 65: break;
        case 2: 
          { return new Yytoken(LogoSym.PLUS ,yytext(),yyline,yychar,yychar + 1);
          }
        case 66: break;
        case 4: 
          { return new Yytoken(LogoSym.MULT ,yytext(),yyline,yychar,yychar + 1);
          }
        case 67: break;
        case 9: 
          { return new Yytoken(LogoSym.IDENTIFIER, yytext(), yyline, yychar, yychar + yytext().length());
          }
        case 68: break;
        case 38: 
          { return new Yytoken(LogoSym.EQUALP, yytext(), yyline, yychar, yychar + 6);
          }
        case 69: break;
        case 14: 
          { return new Yytoken(LogoSym.QUOTE ,yytext(),yyline,yychar,yychar + 1);
          }
        case 70: break;
        case 29: 
          { return new Yytoken(LogoSym.END ,yytext(),yyline,yychar,yychar + 3);
          }
        case 71: break;
        case 45: 
          { return new Yytoken(LogoSym.GREATERP, yytext(), yyline, yychar, yychar + 8);
          }
        case 72: break;
        case 27: 
          { return new Yytoken(LogoSym.BACKWARD ,yytext(),yyline,yychar, yychar + yytext().length());
          }
        case 73: break;
        case 31: 
          { return new Yytoken(LogoSym.ITEM, yytext(), yyline, yychar, yychar + 4);
          }
        case 74: break;
        case 12: 
          { return new Yytoken(LogoSym.INTEGER, yytext(), yyline, yychar, yychar + yytext().length());
          }
        case 75: break;
        case 19: 
          { return new Yytoken(LogoSym.FORWARD ,yytext(),yyline,yychar, yychar + yytext().length());
          }
        case 76: break;
        case 35: 
          { return new Yytoken(LogoSym.PRINT ,yytext(),yyline,yychar,yychar + 5);
          }
        case 77: break;
        case 40: 
          { return new Yytoken(LogoSym.OUTPUT ,yytext(),yyline,yychar,yychar + 6);
          }
        case 78: break;
        case 43: 
          { return new Yytoken(LogoSym.SENTENCE, yytext(), yyline, yychar, yychar + 8);
          }
        case 79: break;
        case 30: 
          { return new Yytoken(LogoSym.MAKE ,yytext(),yyline,yychar,yychar + 4);
          }
        case 80: break;
        case 5: 
          { return new Yytoken(LogoSym.DIV ,yytext(),yyline,yychar,yychar + 1);
          }
        case 81: break;
        case 24: 
          { return new Yytoken(LogoSym.LEFT ,yytext(),yyline,yychar, yychar + yytext().length());
          }
        case 82: break;
        case 3: 
          { return new Yytoken(LogoSym.MINUS ,yytext(),yyline,yychar,yychar + 1);
          }
        case 83: break;
        case 47: 
          { return new Yytoken(LogoSym.DIFFERENCE ,yytext(),yyline,yychar,yychar + 10);
          }
        case 84: break;
        case 6: 
          { return new Yytoken(LogoSym.LT ,yytext(),yyline,yychar,yychar + 1);
          }
        case 85: break;
        case 32: 
          { return new Yytoken(LogoSym.LIST, yytext(), yyline, yychar, yychar + 4);
          }
        case 86: break;
        case 1: 
          { System.out.println("Illegal char, '" + yytext() +
                    "' line: " + yyline + ", column: " + yychar);
          }
        case 87: break;
        case 46: 
          { return new Yytoken(LogoSym.BUTFIRST ,yytext(),yyline,yychar,yychar + 8);
          }
        case 88: break;
        case 39: 
          { return new Yytoken(LogoSym.REPEAT ,yytext(),yyline,yychar,yychar + 6);
          }
        case 89: break;
        case 44: 
          { return new Yytoken(LogoSym.QUOTIENT ,yytext(),yyline,yychar,yychar + 8);
          }
        case 90: break;
        case 7: 
          { return new Yytoken(LogoSym.EQ ,yytext(),yyline,yychar,yychar + 1);
          }
        case 91: break;
        case 15: 
          { 
          }
        case 92: break;
        case 33: 
          { return new Yytoken(LogoSym.LAST ,yytext(),yyline,yychar,yychar + 4);
          }
        case 93: break;
        case 28: 
          { return new Yytoken(LogoSym.SUM ,yytext(),yyline,yychar,yychar + 3);
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
